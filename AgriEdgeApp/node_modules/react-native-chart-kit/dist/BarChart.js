var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from "react";
import { View } from "react-native";
import { G, Rect, Svg, Text } from "react-native-svg";
import AbstractChart from "./AbstractChart";
var barWidth = 32;
var BarChart = /** @class */ (function (_super) {
    __extends(BarChart, _super);
    function BarChart() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getBarPercentage = function () {
            var _a = _this.props.chartConfig.barPercentage, barPercentage = _a === void 0 ? 1 : _a;
            return barPercentage;
        };
        _this.renderBars = function (_a) {
            var data = _a.data, width = _a.width, height = _a.height, paddingTop = _a.paddingTop, paddingRight = _a.paddingRight, barRadius = _a.barRadius;
            var baseHeight = _this.calcBaseHeight(data, height);
            return data.map(function (x, i) {
                var barHeight = _this.calcHeight(x, data, height);
                var barWidth = 32 * _this.getBarPercentage();
                return (<Rect key={Math.random()} x={paddingRight +
                    (i * (width - paddingRight)) / data.length +
                    barWidth / 2} y={((barHeight > 0 ? baseHeight - barHeight : baseHeight) / 4) * 3 +
                    paddingTop} rx={barRadius} width={barWidth} height={(Math.abs(barHeight) / 4) * 3} fill="url(#fillShadowGradient)"/>);
            });
        };
        _this.renderBarTops = function (_a) {
            var data = _a.data, width = _a.width, height = _a.height, paddingTop = _a.paddingTop, paddingRight = _a.paddingRight;
            var baseHeight = _this.calcBaseHeight(data, height);
            return data.map(function (x, i) {
                var barHeight = _this.calcHeight(x, data, height);
                var barWidth = 32 * _this.getBarPercentage();
                return (<Rect key={Math.random()} x={paddingRight +
                    (i * (width - paddingRight)) / data.length +
                    barWidth / 2} y={((baseHeight - barHeight) / 4) * 3 + paddingTop} width={barWidth} height={2} fill={_this.props.chartConfig.color(0.6)}/>);
            });
        };
        _this.renderValuesOnTopOfBars = function (_a) {
            var data = _a.data, width = _a.width, height = _a.height, paddingTop = _a.paddingTop, paddingRight = _a.paddingRight;
            var baseHeight = _this.calcBaseHeight(data, height);
            return data.map(function (x, i) {
                var barHeight = _this.calcHeight(x, data, height);
                var barWidth = 32 * _this.getBarPercentage();
                return (<Text key={Math.random()} x={paddingRight +
                    (i * (width - paddingRight)) / data.length +
                    barWidth / 1} y={((baseHeight - barHeight) / 4) * 3 + paddingTop - 1} fill={_this.props.chartConfig.color(0.6)} fontSize="12" textAnchor="middle">
          {data[i]}
        </Text>);
            });
        };
        return _this;
    }
    BarChart.prototype.render = function () {
        
        var _a;
        var _b = this.props,
         width = _b.width,
          height = _b.height, data = _b.data, _c = _b.style, style = _c === void 0 ? {} : _c,
        _d = _b.withHorizontalLabels, 
        withHorizontalLabels = _d === void 0 ? true : _d, 
        _e = _b.withVerticalLabels, withVerticalLabels = _e === void 0 ? true : _e, _f = _b.verticalLabelRotation, verticalLabelRotation = _f === void 0 ? 0 : _f, _g = _b.horizontalLabelRotation, horizontalLabelRotation = _g === void 0 ? 0 : _g, _h = _b.withInnerLines, withInnerLines = _h === void 0 ? true : _h, _j = _b.showBarTops, showBarTops = _j === void 0 ? true : _j, _k = _b.showValuesOnTopOfBars, showValuesOnTopOfBars = _k === void 0 ? false : _k, _l = _b.segments, segments = _l === void 0 ? 4 : _l;
        var _m = style.borderRadius, borderRadius = _m === void 0 ? 0 : _m, _o = style.paddingTop, paddingTop = _o === void 0 ? 16 : _o, _p = style.paddingRight, paddingRight = _p === void 0 ? 64 : _p;
        
        var config = {
            width: width,
            height: height,
            verticalLabelRotation: verticalLabelRotation,
            horizontalLabelRotation: horizontalLabelRotation,
            barRadius: (this.props.chartConfig && this.props.chartConfig.barRadius) || 0,
            decimalPlaces: (_a = (this.props.chartConfig && this.props.chartConfig.decimalPlaces)) !== null && _a !== void 0 ? _a : 2,
            formatYLabel: (this.props.chartConfig && this.props.chartConfig.formatYLabel) ||
                function (label) {
                    return label;
                },
            formatXLabel: (this.props.chartConfig && this.props.chartConfig.formatXLabel) ||
                function (label) {
                    return label;
                }
        };
        return (<View style={style}>
        <Svg height={height} width={width}>
          {this.renderDefs(__assign(__assign({}, config), this.props.chartConfig))}
          <Rect width="100%" height={height} rx={borderRadius} ry={borderRadius} fill="url(#backgroundGradient)"/>
          <G>
            {withInnerLines
            ? this.renderHorizontalLines(__assign(__assign({}, config), { count: segments, paddingTop: paddingTop }))
            : null}
          </G>
          <G>
            {withHorizontalLabels
            ? this.renderHorizontalLabels(__assign(__assign({}, config),  { count: segments,data: data.datasets[0].labels, paddingRight: paddingRight, paddingTop: paddingTop}))
            : null}
          </G>
        
          <G>
            {withVerticalLabels
            ? this.renderVerticalLabels(__assign(__assign({}, config), { labels: data.labels, paddingRight: paddingRight, paddingTop: paddingTop, horizontalOffset: barWidth * this.getBarPercentage() }))
            : null}
          </G>
          <G>
            {this.renderBars(__assign(__assign({}, config), { data: data.datasets[0].data, paddingTop: paddingTop, paddingRight: paddingRight }))}
          </G>
          <G>
            {showValuesOnTopOfBars &&
            this.renderValuesOnTopOfBars(__assign(__assign({}, config), { data: data.datasets[0].data, paddingTop: paddingTop, paddingRight: paddingRight }))}
          </G>
          <G>
            {showBarTops &&
            this.renderBarTops(__assign(__assign({}, config), { data: data.datasets[0].data, paddingTop: paddingTop, paddingRight: paddingRight }))}
          </G>
        </Svg>
      </View>);
    };
    return BarChart;
}(AbstractChart));
export default BarChart;
//# sourceMappingURL=data:application/json;base64,