var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from "react";
import { View } from "react-native";
import { G, Rect, Svg, Text } from "react-native-svg";
import AbstractChart from "./AbstractChart";
var barWidth = 32;
var StackedBarChart = /** @class */ (function (_super) {
    __extends(StackedBarChart, _super);
    function StackedBarChart() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getBarPercentage = function () {
            var _a = _this.props.chartConfig.barPercentage, barPercentage = _a === void 0 ? 1 : _a;
            return barPercentage;
        };
        _this.getBarRadius = function (ret, x) {
            return _this.props.chartConfig.barRadius && ret.length === x.length - 1
                ? _this.props.chartConfig.barRadius
                : 0;
        };
        _this.renderBars = function (_a) {
            var data = _a.data, width = _a.width, height = _a.height, paddingTop = _a.paddingTop, paddingRight = _a.paddingRight, border = _a.border, colors = _a.colors, _b = _a.stackedBar, stackedBar = _b === void 0 ? false : _b;
            return data.map(function (x, i) {
                var barWidth = 32 * _this.getBarPercentage();
                var ret = [];
                var h = 0;
                var st = paddingTop;
                var fac = 1;
                if (stackedBar) {
                    fac = 0.7;
                }
                for (var z = 0; z < x.length; z++) {
                    h = (height - 55) * (x[z] / border);
                    var y = (height / 4) * 3 - h + st;
                    var xC = (paddingRight +
                        (i * (width - paddingRight)) / data.length +
                        barWidth / 2) *
                        fac;
                    ret.push(<Rect key={Math.random()} x={xC} y={y} rx={_this.getBarRadius(ret, x)} ry={_this.getBarRadius(ret, x)} width={barWidth} height={h} fill={colors[z]}/>);
                    if (!_this.props.hideLegend) {
                        ret.push(<Text key={Math.random()} x={xC + 7 + barWidth / 2} textAnchor="end" y={h > 15 ? y + 15 : y + 7} {..._this.getPropsForLabels()}>
              {x[z]}
            </Text>);
                    }
                    st -= h;
                }
                return ret;
            });
        };
        _this.renderLegend = function (_a) {
            var legend = _a.legend, colors = _a.colors, width = _a.width, height = _a.height;
            return legend.map(function (x, i) {
                return (<G key={Math.random()}>
          <Rect width="16px" height="16px" fill={colors[i]} rx={8} ry={8} x={width * 0.71} y={height * 0.7 - i * 50}/>
          <Text x={width * 0.78} y={height * 0.76 - i * 50} {..._this.getPropsForLabels()}>
            {x}
          </Text>
        </G>);
            });
        };
        return _this;
    }
    StackedBarChart.prototype.render = function () {
        var paddingTop = 15;
        var paddingRight = 50;
        var _a = this.props, width = _a.width, height = _a.height, _b = _a.style, style = _b === void 0 ? {} : _b, data = _a.data, _c = _a.withHorizontalLabels, withHorizontalLabels = _c === void 0 ? true : _c, _d = _a.withVerticalLabels, withVerticalLabels = _d === void 0 ? true : _d, _e = _a.segments, segments = _e === void 0 ? 4 : _e, decimalPlaces = _a.decimalPlaces;
        var _f = style.borderRadius, borderRadius = _f === void 0 ? 0 : _f;
        var config = {
            width: width,
            height: height
        };
        var border = 0;
        for (var i = 0; i < data.data.length; i++) {
            var actual = data.data[i].reduce(function (pv, cv) { return pv + cv; }, 0);
            if (actual > border) {
                border = actual;
            }
        }
        var stackedBar = data.legend && data.legend.length == 0 ? false : true;
        return (<View style={style}>
        <Svg height={height} width={width}>
          {this.renderDefs(__assign(__assign({}, config), this.props.chartConfig))}
          <Rect width="100%" height={height} rx={borderRadius} ry={borderRadius} fill="url(#backgroundGradient)"/>
          <G>
            {this.renderHorizontalLines(__assign(__assign({}, config), { count: segments, paddingTop: paddingTop }))}
          </G>
          <G>
            {withHorizontalLabels
            ? this.renderHorizontalLabels(__assign(__assign({}, config), { count: segments, data: [0, border], paddingTop: paddingTop,
                paddingRight: paddingRight,
                decimalPlaces: decimalPlaces }))
            : null}
          </G>
          <G>
            {withVerticalLabels
            ? this.renderVerticalLabels(__assign(__assign({}, config), { labels: data.labels, paddingRight: paddingRight + 28, stackedBar: stackedBar,
                paddingTop: paddingTop, horizontalOffset: barWidth }))
            : null}
          </G>
          <G>
            {this.renderBars(__assign(__assign({}, config), { data: data.data, border: border, colors: this.props.data.barColors, paddingTop: paddingTop, paddingRight: paddingRight + 20, stackedBar: stackedBar }))}
          </G>
          {data.legend &&
            data.legend.length != 0 &&
            this.renderLegend(__assign(__assign({}, config), { legend: data.legend, colors: this.props.data.barColors }))}
        </Svg>
      </View>);
    };
    return StackedBarChart;
}(AbstractChart));
export default StackedBarChart;
//# sourceMappingURL=data:application/json;base64,